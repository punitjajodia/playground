// ===============================================================
// Utilities
// ===============================================================

//Import font if font-URL exists

@if variable-exists(font-url--google) {
	@import url($font-url--google);
}

// Mixins

@mixin bg-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme} {
			background-color: $color; 
		}
	}
}

@mixin img-replace($img, $w, $h, $disp: block) {
	background-image : url('#{$path--rel}/#{$img}');
	background-repeat : no-repeat;
	width : $w;
	height : $h;
	display : $disp;
}


@mixin pseudo-element ($el, $w:null, $h:null) {
	@if $el ==  "before" or $el == "after" {
		&:#{$el} {
		@extend %pseudos;
		width : $w;
		height : $h;
		@content; 
		}
	}
	@else {
		@error "`#{$el}` is not a valid pseudo element.";
	}
}

// BEM selectors

@mixin e($element) {
	&__#{$element} {
		@content;
	}
}
 
@mixin m($modifier) {
	&--#{$modifier} {
		@content;
	}
}


@mixin doubly($margin : 1em) {
	& + & {
		margin-left : $margin;
		@content;
	}
}

//Media queries 
@mixin mq($break) {
	@if $break == "small" {
		@media (min-width: $breakpoint-sm) and (max-width : $breakpoint-md) {
			@content;
		}
	}
	@else if $break == "medium" {
		@media (min-width: $breakpoint-md + 1){
			@content;
		}
	}
	@else if $break == "large" {
		@media (min-width: $breakpoint-lg) {
			@content;
		} 
	}
	@else {
		@error "Whoops! No value could be retrieved for `#{$break}`";
	}
}


// Grid Columns 

@mixin g-columns {
	@for $i from 1 through $g-col-count {
		$context : g-context($g-col-width, $g-col-count, $g-gutter-width) !global;
		$target : ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

		// Generate column modifier classes
		&--#{$i} {
			width : percentage($target / $context);
		}
	}
}